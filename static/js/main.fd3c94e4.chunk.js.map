{"version":3,"sources":["components/Footer/index.js","components/Wrapper/index.js","utils/employeeContext.js","components/SearchForm/index.js","components/Navbar/index.js","utils/api.js","components/Table/index.js","App.js","serviceWorker.js","index.js"],"names":["Footer","react_default","a","createElement","className","Wrapper","props","Object","assign","EmployeeContext","createContext","SearchForm","_useState","useState","_useState2","slicedToArray","search","setSearch","_useContext","useContext","employees","setDisplayedEmployees","value","onChange","_ref","searchTerm","target","filterResult","filter","employee","firstName","toLowerCase","indexOf","toConsumableArray","name","list","type","placeholder","id","Navbar","href","components_SearchForm","lastName","age","email","role","Table","displayedEmployees","onClick","sort","b","scope","map","App","setEmployees","_useState3","_useState4","useEffect","Promise","resolve","then","Provider","components_Navbar","components_Wrapper","components_Table","components_Footer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.fd3c94e4.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./style.css\";\n\nfunction Footer() {\n  return (\n    <footer className=\"footer\">\n      <span>Employee-Directory</span>\n    </footer>\n  );\n}\n\nexport default Footer;\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction Wrapper(props) {\n  return <main className=\"wrapper\" {...props} />;\n}\n\nexport default Wrapper;\n","import {createContext} from 'react'\n\nexport const EmployeeContext = createContext(null);","import React, {useState, useContext} from 'react';\nimport { EmployeeContext } from '../../utils/employeeContext';\nimport \"./style.css\"\n\n\nfunction SearchForm() {\n\n  const [search, setSearch] = useState(\"\")\n  const {employees, setDisplayedEmployees} = useContext(EmployeeContext)\n    \n  const updateSearch = ({target}) => {\n    const searchTerm = target.value\n\n    setSearch(searchTerm)\n\n    const filterResult = employees.filter(function(employee) {\n      return employee.firstName.toLowerCase().indexOf(searchTerm.toLowerCase()) !== -1 ? true : false\n    })\n    setDisplayedEmployees([...filterResult])\n  };\n\n  return (\n    <form className=\"search\">\n      <div className=\"form-group\">\n        <input\n          value={search}\n          onChange={updateSearch}\n          name=\"term\"\n          list=\"term\"\n          type=\"text\"\n          className=\"form-control\"\n          placeholder=\"Search by Name\"\n          id=\"term\"\n        />\n      </div>\n    </form>\n  );\n}\n\nexport default SearchForm;\n","import React from \"react\";\nimport \"./style.css\";\nimport SearchForm from \"../SearchForm\";\n\n\n// Depending on the current path, this component sets the \"active\" class on the appropriate navigation link item\nfunction Navbar() {\n  return (\n    <nav className=\"navbar navbar-expand-lg navbar-light bg-light\">\n      <a className=\"navbar-brand\" href=\"/\">\n        Employee Directory\n      </a>\n      <SearchForm />\n    </nav>\n  );\n}\n\nexport default Navbar;\n","const employees = [\n    {\n      firstName: 'James',\n      lastName: \"Potter\",\n      age: 31,\n      email: \"jamespotter@asu.edu\",\n      role: \"Software Engineer\"\n  \n    },\n    {\n      firstName: 'John',\n      lastName: \"Williams\",\n      age: 45,\n      email: \"johnwilliams@udr.edu\",\n      role: \"UI/UX Designer\"\n    },\n    {\n      firstName: 'Paul',\n      lastName: \"Pope\",\n      age: 65,\n      email: \"paulpope@brs.edu\",\n      role: \"Sales Manager\"\n    },\n    {\n      firstName: 'Ringo',\n      lastName: \"Galantis\",\n      age: 49,\n      email: \"ringogalantis@bec.edu\",\n      role: \"Software Engineer\"\n    },\n    {\n      firstName: 'George',\n      lastName: \"Haroldson\",\n      age: 34,\n      email: \"georgeharoldson@uci.edu\",\n      role: \"Software Engineer\"\n    }\n  ];\n\nexport function getEmployees() {\n    return new Promise(resolve => {\n      resolve(employees);\n    });\n  };\n\n\n","import React, {useContext} from 'react';\nimport {EmployeeContext} from \"../../utils/employeeContext\"\n\n\nfunction Table() {\n\n    const { displayedEmployees, setDisplayedEmployees, employees } = useContext(EmployeeContext)\n    \n\n\n        function sortByName(){\n            employees.sort(function(a,b){\n            if(a.firstName < b.firstName){\n                return -1;\n            } else {\n                return 1;\n            }\n        })\n           // You have to spread, because this creates a new variable, instead of just updating the variable. React will not recognize it as an update if you just update the variable.\n        setDisplayedEmployees([...employees])\n    }\n\n        function sortByAge(){\n            employees.sort(function(a,b){\n                return (a.age - b.age)\n            })\n            setDisplayedEmployees([...employees])\n    }\n\n\n    return (\n        <table className=\"table table-dark\">\n            <thead>\n                <tr>\n                    <th onClick={() => sortByName() } scope=\"col\"><button>First Name</button></th>\n                    <th scope=\"col\">Last Name</th>\n                    <th onClick={() => sortByAge() } scope=\"col\"><button>Age</button></th>\n                    <th scope=\"col\">Email</th>\n                    <th scope=\"col\">Role</th>\n                </tr>\n            </thead>\n            <tbody>\n                {displayedEmployees.map(employee => {\n                    return (\n                        <tr>\n                        <td>{employee.firstName}</td>\n                        <td>{employee.lastName}</td>\n                        <td>{employee.age}</td>\n                        <td>{employee.email}</td>\n                        <td>{employee.role}</td>\n                        </tr>\n                    )\n                })}\n            </tbody>\n        </table>\n    )\n}\nexport default Table;","import React, {useEffect, useState} from 'react';\nimport Footer from \"./components/Footer\";\nimport Wrapper from \"./components/Wrapper\";\nimport Navbar from \"./components/Navbar\";\nimport { EmployeeContext } from \"./utils/employeeContext\"\nimport {getEmployees} from \"./utils/api\";\nimport Table from \"./components/Table\";\n\n\nfunction App() {\n  const [employees, setEmployees] = useState([]);\n  const [displayedEmployees, setDisplayedEmployees] = useState([])\n\n  useEffect(()=> {\n  \n    getEmployees().then(employees => {\n      setEmployees(employees)\n      setDisplayedEmployees(employees)\n    });\n  }, []);\n\n  return (\n    <div>\n       <EmployeeContext.Provider value={{employees, setEmployees, displayedEmployees, setDisplayedEmployees}}>\n      <Navbar />\n      <Wrapper>\n        <Table/>\n      </Wrapper>\n      <Footer />\n      </EmployeeContext.Provider>\n    </div>\n  );\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}